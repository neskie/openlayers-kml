<?php

/**
* Implementation of hook_theme().
*/
function openlayers_kml_theme() {

  // Create formatter theme functions
  foreach (openlayers_get_presets() as $name => $title) {
    $themes['openlayers_kml_formatter_openlayers_map_' . $name] = array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_openlayers_kml_formatter_kml_openlayers',
    );
  }

  return $themes;
}
 
/**
* Implementation of hook_field_formatter_info().
*
* All fields should have a 'default' formatter.
* Any number of other formatters can be defined as well.
* It's nice for there always to be a 'plain' option
* for the raw value, but that is not required.
*
*/
function openlayers_kml_field_formatter_info() {

  $formatters = array();

  // Map preset formatter
  foreach (openlayers_get_presets() as $name => $title) {
    $formatters['openlayers_map_' . $name] = array(
      'label' => t('OpenLayers Map: @preset', array('@preset' => check_plain($title))),
      'field types' => array('filefield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    );
  }
  return $formatters;
}

/**
 * Theme function for openlayers_kml element
 */
function theme_openlayers_kml_formatter_kml_openlayers($element) {
  // In here, find the KML field, make your map array, and render
  global $base_url;
  $kml = $base_url . '/' . $element['#item']['filepath'];
  //If it's a KMZ file do a little bit of processing
  //This will only work with a KMZ file with only one KML and no images
  //need to add some more logic to finish it off.
  if ( file_get_mimetype($element['#item']['filepath']) == "application/vnd.google-earth.kmz"){
  $zip = zip_open(file_check_location($element['#item']['filepath']));
  if ($zip) {
  while ($zip_entry = zip_read($zip)) {
  //need to check if the tmp directory exists, and create it if not
  $dest = file_create_path("tmp")."/".zip_entry_name($zip_entry);
  if (zip_entry_open($zip, $zip_entry, "r")) {
  $kmldata = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));
  $fullfilename = file_save_data($buf, $dest,$replace=FILE_EXISTS_REPLACE);
  zip_entry_close($zip_entry);
  }
  }
  }
  zip_close($zip);
  $kml = file_create_url($fullfilename);
  }

  // Get the preset that was chosen in display fields
  if (substr($element['#formatter'], 25) == 'openlayers_kml_formatter_') $preset_name = substr($element['#formatter'], 25);
  if (substr($element['#formatter'], 0, 15) == 'openlayers_map_') $preset_name = substr($element['#formatter'], 15);

  $preset = openlayers_get_preset($preset_name);
  $map = $preset['preset_data'];

  // Adds KML Layer
  $map['layers']['kml_example'] = array(
    'id' => 'openlayers_kml_cck',
    'type' => 'KML',
    'name' => t('KML Overlay'),
    'url' => $kml,
  );

  // Adds fullscreen button
  $map['behaviors'] = array(
    'fullscreen' => array(
      'id' => 'fullscreen',
      'type' => 'openlayers_behaviors_fullscreen',
      'layer' => 'kml_example',
    ),
    // Use the 'name' attrib from the KML file as tooltip
    'openlayers_views_tooltip_id' => array(
        'id' => 'openlayers_views_tooltip_id',
        'type' => 'openlayers_behaviors_tooltip',
        'layer' => 'kml_example',
        //'attribute' => 'Description', // could use description instead 
      ),
  );
  // Render Map
  $rendered_map = openlayers_render_map($map);

  return $rendered_map['themed'];
}
